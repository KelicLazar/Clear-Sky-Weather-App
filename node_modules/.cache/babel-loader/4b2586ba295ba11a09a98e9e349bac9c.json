{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\MY REACT PROJECTS\\\\Cool Weather App\\\\weather-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AddCity from \"./components/AddCity\";\nimport CitiesList from \"./components/CitiesList\";\nimport { PlacesContext } from \"./context/place-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const placesCtx = useContext(PlacesContext);\n  const [lat, setLat] = useState(\"\");\n  const [long, setLong] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([\"Select country\"]);\n  const [cities, setCities] = useState([\"Select City\"]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n    placesCtx.getPlaces();\n  }, []);\n\n  const getLocation = async () => {\n    const address = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${process.env.REACT_APP_API_KEY}`;\n    const response = await fetch(address);\n    const data = await response.json();\n    setData(data);\n    console.log(data);\n    console.log(data.weather[0].description);\n    console.log(data.weather[0].main);\n  };\n\n  const fetchCountries = async () => {};\n\n  const selectedCountryHandler = event => {\n    console.log(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCity, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CitiesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Add City of my current location \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Latitude is \", lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Longitude is \", long]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchCountries,\n      children: \"fetch all countries and cities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: selectedCountryHandler,\n      children: placesCtx.placesData.map(item => {\n        console.log(item);\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.country,\n          children: item.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      children: placesCtx.availableCitiesInSelectedCountry.map(city => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: city,\n          children: city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xpyU2gjPO0+BnrH1FS9+nMK4F8E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useContext","useEffect","useState","AddCity","CitiesList","PlacesContext","App","placesCtx","lat","setLat","long","setLong","data","setData","countries","setCountries","cities","setCities","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getPlaces","getLocation","address","process","env","REACT_APP_API_KEY","response","fetch","json","console","log","weather","description","main","fetchCountries","selectedCountryHandler","event","target","value","name","placesData","map","item","country","availableCitiesInSelectedCountry","city"],"sources":["C:/Users/PC/Desktop/MY REACT PROJECTS/Cool Weather App/weather-app/src/App.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AddCity from \"./components/AddCity\";\nimport CitiesList from \"./components/CitiesList\";\nimport { PlacesContext } from \"./context/place-context\";\n\nfunction App() {\n  const placesCtx = useContext(PlacesContext);\n  const [lat, setLat] = useState(\"\");\n  const [long, setLong] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([\"Select country\"]);\n  const [cities, setCities] = useState([\"Select City\"]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n    placesCtx.getPlaces();\n  }, []);\n\n  const getLocation = async () => {\n    const address = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${process.env.REACT_APP_API_KEY}`;\n\n    const response = await fetch(address);\n    const data = await response.json();\n    setData(data);\n    console.log(data);\n    console.log(data.weather[0].description);\n    console.log(data.weather[0].main);\n  };\n\n  const fetchCountries = async () => {};\n\n  const selectedCountryHandler = (event) => {\n    console.log(event.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      <AddCity></AddCity>\n      <CitiesList></CitiesList>\n      <button onClick={getLocation}>Add City of my current location </button>\n      <div>\n        <h3>Latitude is {lat}</h3>\n        <h4>Longitude is {long}</h4>\n        <h2>{data.name}</h2>\n        {/* <p>{data.weather.main}</p> */}\n      </div>\n      <button onClick={fetchCountries}>fetch all countries and cities</button>\n\n      <select onChange={selectedCountryHandler}>\n        {placesCtx.placesData.map((item) => {\n          console.log(item);\n          return <option value={item.country}>{item.country}</option>;\n        })}\n      </select>\n      <select>\n        {placesCtx.availableCitiesInSelectedCountry.map((city) => {\n          return <option value={city}>{city}</option>;\n        })}\n      </select>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAMC,SAAS,GAAGP,UAAU,CAACK,aAAD,CAA5B;EACA,MAAM,CAACG,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,CAAC,gBAAD,CAAD,CAA1C;EACA,MAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,CAAC,aAAD,CAAD,CAApC;EAEAD,SAAS,CAAC,MAAM;IACdiB,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;MACrDZ,MAAM,CAACY,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,CAAN;MACAZ,OAAO,CAACU,QAAQ,CAACC,MAAT,CAAgBE,SAAjB,CAAP;IACD,CAHD;IAKAjB,SAAS,CAACkB,SAAV;EACD,CAPQ,EAON,EAPM,CAAT;;EASA,MAAMC,WAAW,GAAG,YAAY;IAC9B,MAAMC,OAAO,GAAI,uDAAsDnB,GAAI,QAAOE,IAAK,UAASkB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAA9H;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAD,CAA5B;IACA,MAAMf,IAAI,GAAG,MAAMmB,QAAQ,CAACE,IAAT,EAAnB;IACApB,OAAO,CAACD,IAAD,CAAP;IACAsB,OAAO,CAACC,GAAR,CAAYvB,IAAZ;IACAsB,OAAO,CAACC,GAAR,CAAYvB,IAAI,CAACwB,OAAL,CAAa,CAAb,EAAgBC,WAA5B;IACAH,OAAO,CAACC,GAAR,CAAYvB,IAAI,CAACwB,OAAL,CAAa,CAAb,EAAgBE,IAA5B;EACD,CATD;;EAWA,MAAMC,cAAc,GAAG,YAAY,CAAE,CAArC;;EAEA,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;IACxCP,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACC,MAAN,CAAaC,KAAzB;EACD,CAFD;;EAIA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAA,wBACE,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,UAAD;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,OAAO,EAAEjB,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAA,wBACE;QAAA,2BAAiBlB,GAAjB;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,4BAAkBE,IAAlB;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,UAAKE,IAAI,CAACgC;MAAV;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF,eAUE;MAAQ,OAAO,EAAEL,cAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVF,eAYE;MAAQ,QAAQ,EAAEC,sBAAlB;MAAA,UACGjC,SAAS,CAACsC,UAAV,CAAqBC,GAArB,CAA0BC,IAAD,IAAU;QAClCb,OAAO,CAACC,GAAR,CAAYY,IAAZ;QACA,oBAAO;UAAQ,KAAK,EAAEA,IAAI,CAACC,OAApB;UAAA,UAA8BD,IAAI,CAACC;QAAnC;UAAA;UAAA;UAAA;QAAA,QAAP;MACD,CAHA;IADH;MAAA;MAAA;MAAA;IAAA,QAZF,eAkBE;MAAA,UACGzC,SAAS,CAAC0C,gCAAV,CAA2CH,GAA3C,CAAgDI,IAAD,IAAU;QACxD,oBAAO;UAAQ,KAAK,EAAEA,IAAf;UAAA,UAAsBA;QAAtB;UAAA;UAAA;UAAA;QAAA,QAAP;MACD,CAFA;IADH;MAAA;MAAA;MAAA;IAAA,QAlBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA0BD;;GA5DQ5C,G;;KAAAA,G;AA8DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}