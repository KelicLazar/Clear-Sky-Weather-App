{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\MY REACT PROJECTS\\\\Cool Weather App\\\\weather-app\\\\src\\\\context\\\\place-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlacesContext = /*#__PURE__*/React.createContext({\n  favoritePlaces: [],\n  error: null,\n  isVisible: false,\n  cityWeatherInfo: [],\n  showForm: () => {},\n  addFavoritePlace: () => {},\n  removeFavoritePlace: () => {}\n});\n\nconst PlacesContextProvider = props => {\n  _s();\n\n  const [favPlaces, setFavPlaces] = useState([]);\n  const [cityWeatherInfo, setCityWeatherInfo] = useState([]);\n  const [error, setError] = useState(null);\n  const [isVisible, setIsvisible] = useState(false);\n  console.log(\"loaded ctxprovider\");\n\n  const addFavoritePlaceHandler = async city => {\n    if (favPlaces.some(e => e.cityName === city)) {\n      setError(\"That city is already added to favorites\");\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n      return;\n    }\n\n    if (favPlaces.length === 5) {\n      setError(\"Maximum number of favorite cities is reached\");\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n      return;\n    }\n\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`);\n\n    if (!response.ok) {\n      console.error(\"There is no info about that city\");\n      setError(\"There is no info about \" + city);\n      setTimeout(() => {\n        setError(null);\n      }, 2000);\n      throw Error(response.statusText);\n    }\n\n    const data = await response.json();\n    console.log(data);\n    const fullCity = {\n      cityName: city,\n      cityCode: city.sys.country,\n      lat: data.coord.lat,\n      long: data.coord.lon\n    };\n    const getWeatherData = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${fullCity.lat}&lon=${fullCity.long}&units=metric&exclude=hourly,minutely&appid=${process.env.REACT_APP_API_KEY}`);\n    const weatherData = await getWeatherData.json();\n    console.log(\"This is weather data\", weatherData);\n    console.log(weatherData.daily[0].temp.day);\n    console.log(fullCity);\n    setFavPlaces(prevValue => {\n      return [...prevValue, fullCity];\n    });\n    setCityWeatherInfo(prevValue => {\n      return [...prevValue, weatherData];\n    });\n    setIsvisible(false);\n  };\n\n  const onShow = () => {\n    setIsvisible(true);\n  };\n\n  const removeFavoritePlaceHandler = () => {};\n\n  return /*#__PURE__*/_jsxDEV(PlacesContext.Provider, {\n    value: {\n      favoritePlaces: favPlaces,\n      error: error,\n      cityWeatherInfo: cityWeatherInfo,\n      isVisible: isVisible,\n      showForm: onShow,\n      addFavoritePlace: addFavoritePlaceHandler,\n      removeFavoritePlace: removeFavoritePlaceHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlacesContextProvider, \"hv/yv+Y3ej9JzbREKRI5dDPlgsE=\");\n\n_c = PlacesContextProvider;\nexport default PlacesContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlacesContextProvider\");","map":{"version":3,"names":["React","useState","PlacesContext","createContext","favoritePlaces","error","isVisible","cityWeatherInfo","showForm","addFavoritePlace","removeFavoritePlace","PlacesContextProvider","props","favPlaces","setFavPlaces","setCityWeatherInfo","setError","setIsvisible","console","log","addFavoritePlaceHandler","city","some","e","cityName","setTimeout","length","response","fetch","process","env","REACT_APP_API_KEY","ok","Error","statusText","data","json","fullCity","cityCode","sys","country","lat","coord","long","lon","getWeatherData","weatherData","daily","temp","day","prevValue","onShow","removeFavoritePlaceHandler","children"],"sources":["C:/Users/PC/Desktop/MY REACT PROJECTS/Cool Weather App/weather-app/src/context/place-context.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const PlacesContext = React.createContext({\r\n  favoritePlaces: [],\r\n  error: null,\r\n  isVisible: false,\r\n  cityWeatherInfo: [],\r\n  showForm: () => {},\r\n  addFavoritePlace: () => {},\r\n  removeFavoritePlace: () => {},\r\n});\r\n\r\nconst PlacesContextProvider = (props) => {\r\n  const [favPlaces, setFavPlaces] = useState([]);\r\n  const [cityWeatherInfo, setCityWeatherInfo] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isVisible, setIsvisible] = useState(false);\r\n  console.log(\"loaded ctxprovider\");\r\n\r\n  const addFavoritePlaceHandler = async (city) => {\r\n    if (favPlaces.some((e) => e.cityName === city)) {\r\n      setError(\"That city is already added to favorites\");\r\n      setTimeout(() => {\r\n        setError(null);\r\n      }, 2000);\r\n      return;\r\n    }\r\n    if (favPlaces.length === 5) {\r\n      setError(\"Maximum number of favorite cities is reached\");\r\n      setTimeout(() => {\r\n        setError(null);\r\n      }, 2000);\r\n      return;\r\n    }\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`\r\n    );\r\n    if (!response.ok) {\r\n      console.error(\"There is no info about that city\");\r\n      setError(\"There is no info about \" + city);\r\n      setTimeout(() => {\r\n        setError(null);\r\n      }, 2000);\r\n      throw Error(response.statusText);\r\n    }\r\n    const data = await response.json();\r\n    console.log(data);\r\n    const fullCity = {\r\n      cityName: city,\r\n      cityCode: city.sys.country,\r\n      lat: data.coord.lat,\r\n      long: data.coord.lon,\r\n    };\r\n    const getWeatherData = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${fullCity.lat}&lon=${fullCity.long}&units=metric&exclude=hourly,minutely&appid=${process.env.REACT_APP_API_KEY}`\r\n    );\r\n    const weatherData = await getWeatherData.json();\r\n    console.log(\"This is weather data\", weatherData);\r\n    console.log(weatherData.daily[0].temp.day);\r\n    console.log(fullCity);\r\n    setFavPlaces((prevValue) => {\r\n      return [...prevValue, fullCity];\r\n    });\r\n    setCityWeatherInfo((prevValue) => {\r\n      return [...prevValue, weatherData];\r\n    });\r\n    setIsvisible(false);\r\n  };\r\n  const onShow = () => {\r\n    setIsvisible(true);\r\n  };\r\n  const removeFavoritePlaceHandler = () => {};\r\n\r\n  return (\r\n    <PlacesContext.Provider\r\n      value={{\r\n        favoritePlaces: favPlaces,\r\n        error: error,\r\n        cityWeatherInfo: cityWeatherInfo,\r\n        isVisible: isVisible,\r\n        showForm: onShow,\r\n        addFavoritePlace: addFavoritePlaceHandler,\r\n        removeFavoritePlace: removeFavoritePlaceHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </PlacesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PlacesContextProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}