{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\MY REACT PROJECTS\\\\Cool Weather App\\\\weather-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AddCity from \"./components/AddCity\";\nimport CitiesList from \"./components/CitiesList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [lat, setLat] = useState(\"\");\n  const [long, setLong] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([\"Select country\"]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n    const getCountries = async () => {\n      const response = await fetch(\"https://countriesnow.space/api/v0.1/countries\");\n      const info = await response.json();\n      const drzave = [\"Select Country\"];\n\n      for (let i = 0; i < info.data.length; i++) {\n        drzave.push(info.data[i].country);\n      }\n\n      setCountries(drzave);\n    };\n\n    getCountries();\n  }, []);\n\n  const getLocation = async () => {\n    const address = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${process.env.REACT_APP_API_KEY}`;\n    const response = await fetch(address);\n    const data = await response.json();\n    setData(data);\n    console.log(data);\n    console.log(data.weather[0].description);\n    console.log(data.weather[0].main);\n  };\n\n  const fetchCountries = async () => {};\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AddCity, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CitiesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Add City of my current location \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Latitude is \", lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Longitude is \", long]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchCountries,\n      children: \"fetch all countries and cities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"countries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"countries\",\n      children: countries.map(country => {\n        if (country === \"Select Country\") {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            hidden: true,\n            disabled: true,\n            selected: true,\n            children: \"Select an option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zUzr4EweZjiag4y+S/eTyYfd98g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","AddCity","CitiesList","App","lat","setLat","long","setLong","data","setData","countries","setCountries","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getCountries","response","fetch","info","json","drzave","i","length","push","country","getLocation","address","process","env","REACT_APP_API_KEY","console","log","weather","description","main","fetchCountries","name","map"],"sources":["C:/Users/PC/Desktop/MY REACT PROJECTS/Cool Weather App/weather-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AddCity from \"./components/AddCity\";\nimport CitiesList from \"./components/CitiesList\";\n\nfunction App() {\n  const [lat, setLat] = useState(\"\");\n  const [long, setLong] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [countries, setCountries] = useState([\"Select country\"]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n    const getCountries = async () => {\n      const response = await fetch(\n        \"https://countriesnow.space/api/v0.1/countries\"\n      );\n      const info = await response.json();\n      const drzave = [\"Select Country\"];\n      for (let i = 0; i < info.data.length; i++) {\n        drzave.push(info.data[i].country);\n      }\n      setCountries(drzave);\n    };\n    getCountries();\n  }, []);\n\n  const getLocation = async () => {\n    const address = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${process.env.REACT_APP_API_KEY}`;\n\n    const response = await fetch(address);\n    const data = await response.json();\n    setData(data);\n    console.log(data);\n    console.log(data.weather[0].description);\n    console.log(data.weather[0].main);\n  };\n\n  const fetchCountries = async () => {};\n\n  return (\n    <React.Fragment>\n      <AddCity></AddCity>\n      <CitiesList></CitiesList>\n      <button onClick={getLocation}>Add City of my current location </button>\n      <div>\n        <h3>Latitude is {lat}</h3>\n        <h4>Longitude is {long}</h4>\n        <h2>{data.name}</h2>\n        {/* <p>{data.weather.main}</p> */}\n      </div>\n      <button onClick={fetchCountries}>fetch all countries and cities</button>\n      <input list=\"countries\"></input>\n      <select id=\"countries\">\n        {countries.map((country) => {\n          if (country === \"Select Country\") {\n            return (\n              <option hidden disabled selected>\n                Select an option\n              </option>\n            );\n          }\n          return <option value={country}>{country}</option>;\n        })}\n      </select>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}